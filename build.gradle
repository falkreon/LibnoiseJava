 buildscript {
	repositories {
		mavenCentral();
		jcenter();
		maven {
			name = "sonatype";
			url = "https://oss.sonatype.org/content/repositories/snapshots/";
		}
		maven {
			url "https://plugins.gradle.org/m2/";
		}
	}
	dependencies {
		classpath "gradle.plugin.net.minecrell:licenser:0.3";
	}
}

apply plugin: "java";
apply plugin: "net.minecrell.licenser";
apply plugin: "eclipse";

group = "blue.endless.libnoise";
archivesBaseName = "LibnoiseJava";
version = "0.0.1";
def versionSuffix = '-SNAPSHOT'
if (System.env.BUILD_NUMBER) {
	versionSuffix = ''
	version = version+'-'+System.env.BUILD_NUMBER
}

if (file("private.gradle").exists()) {
	print "private.gradle is present. Enabling publish."
	
	apply plugin: "maven-publish";

	publishing {
		publications {
			mavenPrimary(MavenPublication) {
				from components.java;

				groupId project.group;
				artifactId "LibnoiseJava";
				version project.version+versionSuffix;
				artifact jar;
			}

			mavenSources(MavenPublication) {
				from components.java;

				classifier "sources";
				groupId project.group;
				artifactId "LibnoiseJava";
				version project.version+versionSuffix;
				artifact sourcesJar;
			}
		}
	}

	apply from: "private.gradle";
	
	defaultTasks "clean", "build", "sourcesJar";
} else {
	print "No private.gradle is present. Skipping publish."
	
	defaultTasks "clean", "build", "sourcesJar";
}





sourceCompatibility = 1.8;
targetCompatibility = 1.8;



repositories {
	jcenter()
	mavenCentral()
}
 
dependencies {
	testCompile "junit:junit:4.12";
	
	compile group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2";
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

license {
	exclude "**/RandomVectors.java";
}
